name: Verifiación y contruncción API - FastAPI

on: [push, pull_request]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}

jobs:
  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./API
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install isort
        run: pip install isort
      - name: Run isort
        run: isort --check-only --verbose --diff ./app
      - name: Install black
        run: pip install black
      - name: Run black
        run: black --check ./app
      - name: pre-commit
        run: |
          pip install pre-commit
          pre-commit run -av trailing-whitespace
          pre-commit run -av end-of-file-fixer
          pre-commit run -av check-yaml

  # test:
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ./API
  #   steps:
  #   - uses: actions/checkout@v4
  #   - uses: actions/setup-python@v4
  #     with:
  #       python-version: "3.10"
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install pytest
  #   - name: Test with pytest
  #     run: pytest test

  docker:
    if: "github.ref_name == 'master'"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./API
    needs: [lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Get current date for tag
        id: date-tag
        run: |
          DATE_TAG=$(date +'%Y%m%d')
          echo "DATE_TAG=$DATE_TAG" >> $GITHUB_ENV

      - name: Set image tag
        id: set-image-tag
        run: echo "IMAGE_TAG=${{ env.DATE_TAG }}.${{ github.run_number }}" >> $GITHUB_ENV

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
